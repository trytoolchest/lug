version: 2.1
orbs:
  python: circleci/python@2.0.3
jobs:
  deploy-to-pypi:
    executor: python/default
    working_directory: ~/repo
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Build and publish to PyPI
          command: |
            cd ~/repo
            PYPI_ENVIRONMENT=$([[ $CIRCLE_BRANCH = main ]] && echo prod-pypi || echo test-pypi)
            PYPI_ACCESS_TOKEN=$([[ $PYPI_ENVIRONMENT = prod-pypi ]] && echo $PYPI_PROD_TOKEN || echo $PYPI_TEST_TOKEN)
            poetry config pypi-token.$PYPI_ENVIRONMENT $PYPI_ACCESS_TOKEN
            poetry publish --build -r $PYPI_ENVIRONMENT
  unit-tests:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    parallelism: 8
    steps:
      - checkout
      - restore_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
      - run:
          name: Install dependencies
          # --no-ansi flag is workaround for https://github.com/python-poetry/poetry/issues/7184
          command: |
            cd ~/repo
            curl -sSL https://install.python-poetry.org | python3 -
            ln -sf ~/.local/share/pypoetry/venv/bin/poetry ~/.local/bin/poetry
            ~/.local/bin/poetry install --no-ansi
      - save_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
          paths:
            - ~/.local/share/pypoetry
            - ~/.local/bin
            - ~/.cache/pypoetry
      - run:
          name: Run unit tests
          command: |
            cd ~/repo
            shopt -s globstar
            # Converts test filepaths (test/test_subdir/test_file.py) to classnames (test.test_subdir.test_file), 
            # then splits by classname (to account for the pytested function potentially being in a different file)
            # Output split on classnames looks like: test.test_file1 test.test_file2 test.test_file3
            TESTCLASSNAMES=$(circleci tests glob "test/**/test*.py" | sed -e 's/\.[^.]*$//' -e 's/\//\./g' | circleci tests split --split-by=timings --timings-type=classname)
            TESTFILES=$(echo $TESTCLASSNAMES | sed -e 's/\./\//g' -e 's/$/\.py/' -e 's/ /\.py /g')
            shopt -u globstar
            mkdir -p ~/lug-unit-test-results
            ~/.local/bin/poetry run pytest -v -m "unit or unit_io" --durations=0 --junitxml="~/lug-unit-test-results/junit.xml" $TESTFILES
      - store_test_results:
          path: ~/lug-unit-test-results
      - store_artifacts:
          path: ~/lug-unit-test-results
  integration-tests:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          key: v2-deps-{{ checksum "poetry.lock" }}
      - run:
          name: Install dependencies
           # --no-ansi flag is workaround for https://github.com/python-poetry/poetry/issues/7184
          command: |
            cd ~/repo
            curl -sSL https://install.python-poetry.org | python3 -
            ~/.local/bin/poetry install --no-ansi
      - save_cache:
          key: v1-deps-{{ checksum "poetry.lock" }}
          paths:
            - ~/.local/share/pypoetry
            - ~/.local/bin
            - ~/.cache/pypoetry
      - run:
          name: Run integration tests
          parallel: true
          command: |
            cd ~/repo
            shopt -s globstar
            # Converts test filepaths (test/test_subdir/test_file.py) to classnames (test.test_subdir.test_file), 
            # then splits by classname (to account for the pytested function potentially being in a different file)
            # Output split on classnames looks like: test.test_file1 test.test_file2 test.test_file3
            TESTCLASSNAMES=$(circleci tests glob "test/**/test*.py" | sed -e 's/\.[^.]*$//' -e 's/\//\./g' | circleci tests split --split-by=timings --timings-type=classname)
            TESTFILES=$(echo $TESTCLASSNAMES | sed -e 's/\./\//g' -e 's/$/\.py/' -e 's/ /\.py /g')
            shopt -u globstar
            mkdir -p ~/lug-unit-test-results
            ~/.local/bin/poetry run pytest -v -m integration --durations=0 --junitxml="~/lug-integration-test-results/junit.xml" $TESTFILES
          no_output_timeout: 1h
      - store_test_results:
          path: ~/lug-integration-test-results
      - store_artifacts:
          path: ~/lug-integration-test-results
  lint:
    executor: python/default
    working_directory: ~/repo
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run flake8 linter
          parallel: true
          command: |
            cd ~/repo
            pip install flake8
            flake8 ./ --output-file test-reports
          no_output_timeout: 5m
      - store_artifacts:
          path: ~/test-reports
          destination: ~/test-reports
workflows:
  test:
    jobs:
      - unit-tests
      - lint
      - integration-tests:
          filters:
            branches:
              only:
                - main
                - staging
  deploy:
    jobs:
      - deploy-to-pypi:
          filters:
            branches:
              only:
                - main
                - staging
